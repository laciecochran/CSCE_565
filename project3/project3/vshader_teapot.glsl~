#version 150 core

in  vec4 vPosition;
in  vec3 vNormal;
in  vec2 vTexCoord;

out vec4 color;
out vec2 texCoord;
out vec3 R; //reflection

uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct;
uniform vec4 LightPosition;
uniform float Shininess;

uniform mat4 model_view;
uniform mat4 projection;

void main() 
{
	// Transform vertex position into eye coordinates
	vec3 pos = (model_view * vPosition).xyz; //eye position
	vec3 L; //eye light position
	// Compute the four vectors
	if (LightPosition.w!=0)//point light
		L = normalize((model_view *LightPosition).xyz-pos);
	else //distant light
		L = normalize((model_view * LightPosition).xyz);
	vec3 E = normalize( -pos );
	vec3 H = normalize( L + E );
	// Transform vertex normal into eye coordinates
	vec3 N = normalize( model_view*vec4(vNormal, 0.0) ).xyz;

	// Compute terms in the illumination equation
	// Ambient term
	vec4 ambient = AmbientProduct;
	// Diffuse term
	float Kd = max( dot(L, N), 0.0 );
	vec4 diffuse = Kd*DiffuseProduct;
	// Specular term
	float Ks = pow( max(dot(N, H), 0.0), Shininess );
	vec4 specular = Ks * SpecularProduct;
	// discard the specular highlight if the light's behind the vertex
	if( dot(L, N) < 0.0 )
		specular = vec4(0.0, 0.0, 0.0, 1.0);
	color = ambient + diffuse + specular;
	color.a = 1.0;
	texCoord = vTexCoord;
	gl_Position = projection * model_view * vPosition;
        R = reflect(-pos.xyz, N);
} 
